// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model - represents both game-generated actors and real users
model User {
  id              String   @id @default(uuid())
  walletAddress   String?  @unique  // For real users with Web3 auth
  username        String?  @unique
  displayName     String?
  bio             String?
  profileImageUrl String?
  isActor         Boolean  @default(false)  // true = game-generated NPC
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Actor-specific fields (from actors.json)
  personality     String?
  postStyle       String?
  postExample     String?

  // Virtual wallet for trading
  virtualBalance       Decimal  @default(10000) @db.Decimal(18, 2) // Start with $10k
  totalDeposited       Decimal  @default(10000) @db.Decimal(18, 2)
  totalWithdrawn       Decimal  @default(0) @db.Decimal(18, 2)
  lifetimePnL          Decimal  @default(0) @db.Decimal(18, 2)
  
  // On-chain identity (ERC-8004)
  onChainRegistered    Boolean  @default(false)
  nftTokenId           Int?     @unique  // ERC-8004 NFT token ID
  registrationTxHash   String?  // Transaction hash of on-chain registration

  // Profile completion tracking
  profileComplete      Boolean  @default(false)
  hasProfileImage      Boolean  @default(false)
  hasUsername          Boolean  @default(false)
  hasBio               Boolean  @default(false)
  profileSetupCompletedAt DateTime?

  // Relationships
  comments        Comment[]
  reactions       Reaction[]
  positions       Position[]
  followedBy      Follow[]     @relation("following")
  following       Follow[]     @relation("follower")
  favorites       Favorite[]   @relation("UserFavorites")
  favoritedBy     Favorite[]   @relation("UserFavoritedBy")
  shares          Share[]
  balanceTransactions BalanceTransaction[]
  notifications   Notification[] @relation("NotificationRecipient")
  notificationsSent Notification[] @relation("NotificationActor")

  @@index([walletAddress])
  @@index([username])
  @@index([isActor])
}

// Post model - social media posts
model Post {
  id          String   @id @default(uuid())
  content     String
  authorId    String   // Game actor ID (not a User FK)
  gameId      String?
  dayNumber   Int?
  timestamp   DateTime @default(now())
  createdAt   DateTime @default(now())

  // Relationships
  comments    Comment[]
  reactions   Reaction[]
  shares      Share[]

  @@index([authorId, timestamp(sort: Desc)])
  @@index([timestamp(sort: Desc)])
  @@index([gameId, dayNumber])
}

// Comment model - comments on posts
model Comment {
  id              String   @id @default(uuid())
  content         String
  postId          String
  authorId        String
  parentCommentId String?  // For threaded replies
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relationships
  post          Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  author        User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parentComment Comment?  @relation("CommentReplies", fields: [parentCommentId], references: [id], onDelete: Cascade)
  replies       Comment[] @relation("CommentReplies")
  reactions     Reaction[]

  @@index([postId, createdAt(sort: Desc)])
  @@index([authorId])
  @@index([parentCommentId])
}

// Reaction model - likes on posts and comments
model Reaction {
  id        String   @id @default(uuid())
  postId    String?  // Nullable for comment reactions
  commentId String?  // For comment reactions
  userId    String
  type      String   @default("like")  // "like", "love", "laugh", etc.
  createdAt DateTime @default(now())

  // Relationships
  post    Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId, type])
  @@unique([commentId, userId, type])
  @@index([postId])
  @@index([commentId])
  @@index([userId])
}

// Follow model - user follows
model Follow {
  id          String   @id @default(uuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  // Relationships
  follower  User @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

// Favorite model - user favorites profiles
model Favorite {
  id           String   @id @default(uuid())
  userId       String   // Who favorited
  targetUserId String   // Who was favorited
  createdAt    DateTime @default(now())

  // Relationships
  user       User @relation("UserFavorites", fields: [userId], references: [id], onDelete: Cascade)
  targetUser User @relation("UserFavoritedBy", fields: [targetUserId], references: [id], onDelete: Cascade)

  @@unique([userId, targetUserId])
  @@index([userId])
  @@index([targetUserId])
}

// Share model - reposts/shares of posts
model Share {
  id        String   @id @default(uuid())
  userId    String   // Who shared
  postId    String   // Original post
  createdAt DateTime @default(now())

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([userId])
  @@index([postId])
  @@index([createdAt(sort: Desc)])
}

// Market model - prediction markets
model Market {
  id          String   @id @default(uuid())
  question    String
  description String?
  gameId      String?
  dayNumber   Int?
  yesShares   Decimal  @default(0)  @db.Decimal(18, 6)
  noShares    Decimal  @default(0)  @db.Decimal(18, 6)
  liquidity   Decimal  @db.Decimal(18, 6)
  resolved    Boolean  @default(false)
  resolution  Boolean? // true = YES won, false = NO won, null = not resolved
  endDate     DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  positions Position[]

  @@index([gameId, dayNumber])
  @@index([resolved, endDate])
  @@index([createdAt(sort: Desc)])
}

// Position model - user positions in markets
model Position {
  id        String   @id @default(uuid())
  userId    String
  marketId  String
  side      Boolean  // true = YES, false = NO
  shares    Decimal  @db.Decimal(18, 6)
  avgPrice  Decimal  @db.Decimal(18, 6)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  market Market @relation(fields: [marketId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([marketId])
  @@index([userId, marketId])
}

// Chat model - group chats and DMs
model Chat {
  id        String   @id @default(uuid())
  name      String?  // null for DMs
  isGroup   Boolean  @default(false)
  gameId    String?
  dayNumber Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  messages      Message[]
  participants  ChatParticipant[]

  @@index([gameId, dayNumber])
  @@index([isGroup])
}

// ChatParticipant model - users in chats
model ChatParticipant {
  id        String   @id @default(uuid())
  chatId    String
  userId    String
  joinedAt  DateTime @default(now())

  // Relationships
  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@unique([chatId, userId])
  @@index([chatId])
  @@index([userId])
}

// Message model - chat messages
model Message {
  id        String   @id @default(uuid())
  chatId    String
  senderId  String
  content   String
  createdAt DateTime @default(now())

  // Relationships
  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@index([chatId, createdAt(sort: Desc)])
  @@index([senderId])
}

// Game model - continuous game state tracking
model Game {
  id              String   @id @default(uuid())
  currentDay      Int      @default(1)
  currentDate     DateTime @default(now()) // Current in-game date
  isRunning       Boolean  @default(false)
  isContinuous    Boolean  @default(true)  // Continuous vs monthly batch
  speed           Int      @default(60000) // milliseconds between ticks (60s default)
  startedAt       DateTime?
  pausedAt        DateTime?
  completedAt     DateTime?
  lastTickAt      DateTime? // Last time generation ran
  lastSnapshotAt  DateTime? // Last daily snapshot
  activeQuestions Int      @default(0) // Current active question count
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([isRunning])
  @@index([isContinuous])
}

// UserInteraction model - tracks player replies to NPCs with rate limiting
model UserInteraction {
  id              String   @id @default(uuid())
  userId          String   // Player who replied
  npcId           String   // NPC actor ID they replied to
  postId          String   // Post they replied to
  commentId       String   // Their comment ID
  timestamp       DateTime @default(now())
  qualityScore    Float    @default(1.0) // 0-1 score based on length, uniqueness, etc.
  wasFollowed     Boolean  @default(false) // Did NPC follow them after this?
  wasInvitedToChat Boolean  @default(false) // Were they invited to a group chat after this?
  
  @@index([userId, npcId, timestamp(sort: Desc)])
  @@index([userId, timestamp(sort: Desc)])
  @@index([npcId, timestamp(sort: Desc)])
}

// GroupChatMembership model - tracks player membership in NPC group chats
model GroupChatMembership {
  id                  String   @id @default(uuid())
  userId              String   // Player
  chatId              String   // Group chat
  npcAdminId          String   // NPC who owns/controls the chat
  joinedAt            DateTime @default(now())
  lastMessageAt       DateTime? // Last time user posted in chat
  messageCount        Int      @default(0) // Total messages by user
  qualityScore        Float    @default(1.0) // Average quality of messages
  isActive            Boolean  @default(true) // False if swept/booted
  sweepReason         String?  // Why they were removed (inactive, spam, low quality)
  removedAt           DateTime?
  
  @@unique([userId, chatId])
  @@index([userId, isActive])
  @@index([chatId, isActive])
  @@index([lastMessageAt])
}

// FollowStatus model - tracks NPC follows of players
model FollowStatus {
  id              String   @id @default(uuid())
  userId          String   // Player
  npcId           String   // NPC actor ID
  followedAt      DateTime @default(now())
  unfollowedAt    DateTime? // If NPC unfollows
  isActive        Boolean  @default(true)
  followReason    String?  // "consistent_replies", "quality_content", etc.
  
  @@unique([userId, npcId])
  @@index([userId, isActive])
  @@index([npcId])
}

// PerpPosition model - perpetual futures positions
model PerpPosition {
  id                    String   @id @default(uuid())
  userId                String
  ticker                String   // Company ticker
  organizationId        String
  side                  String   // 'long' or 'short'
  entryPrice            Float
  currentPrice          Float
  size                  Float    // Position size in USD
  leverage              Int      // 1-100x
  liquidationPrice      Float
  unrealizedPnL         Float
  unrealizedPnLPercent  Float
  fundingPaid           Float    @default(0)
  openedAt              DateTime @default(now())
  lastUpdated           DateTime @updatedAt
  closedAt              DateTime?
  realizedPnL           Float?   // Set when closed
  
  @@index([userId, closedAt])
  @@index([ticker])
  @@index([organizationId])
}

// BalanceTransaction model - tracks all balance changes
model BalanceTransaction {
  id              String   @id @default(uuid())
  userId          String
  type            String   // 'deposit', 'perp_open', 'perp_close', 'pred_buy', 'pred_sell', 'pred_payout', 'funding_paid'
  amount          Decimal  @db.Decimal(18, 2) // Can be negative for debits
  balanceBefore   Decimal  @db.Decimal(18, 2)
  balanceAfter    Decimal  @db.Decimal(18, 2)
  relatedId       String?  // positionId or other reference
  description     String?
  createdAt       DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, createdAt(sort: Desc)])
  @@index([type])
}

// Question model - prediction market questions
model Question {
  id              String   @id @default(uuid())
  questionNumber  Int      // Sequential number
  text            String
  scenarioId      Int
  outcome         Boolean  // Predetermined outcome
  rank            Int
  createdDate     DateTime @default(now())
  resolutionDate  DateTime // When question resolves (24h-7d from creation)
  status          String   @default("active") // 'active', 'resolved', 'cancelled'
  resolvedOutcome Boolean? // Final outcome when resolved
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([status, resolutionDate])
  @@index([createdDate(sort: Desc)])
  @@index([questionNumber])
}

// Organization model - companies, media, government
model Organization {
  id              String   @id // From actors.json
  name            String
  description     String
  type            String   // 'company', 'media', 'government'
  canBeInvolved   Boolean  @default(true)
  initialPrice    Float?   // For companies
  currentPrice    Float?   // Current stock price
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relationships
  stockPrices StockPrice[]

  @@index([type])
  @@index([currentPrice])
}

// StockPrice model - price history for companies
model StockPrice {
  id             String   @id @default(uuid())
  organizationId String
  price          Float
  change         Float    // Change from previous
  changePercent  Float    // Percentage change
  timestamp      DateTime @default(now())
  isSnapshot     Boolean  @default(false) // true for EOD snapshots
  openPrice      Float?   // For daily snapshots
  highPrice      Float?   // For daily snapshots
  lowPrice       Float?   // For daily snapshots
  volume         Float?   // For daily snapshots

  // Relationships
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId, timestamp(sort: Desc)])
  @@index([timestamp(sort: Desc)])
  @@index([isSnapshot, timestamp])
}

// WorldEvent model - events that happen in the game
model WorldEvent {
  id              String   @id @default(uuid())
  eventType       String   // 'meeting', 'announcement', 'scandal', etc.
  description     String
  actors          String[] // Array of actor IDs
  relatedQuestion Int?     // Question number
  pointsToward    String?  // 'YES', 'NO', or null
  visibility      String   @default("public") // 'public', 'private', 'group'
  gameId          String?
  dayNumber       Int?
  timestamp       DateTime @default(now())
  createdAt       DateTime @default(now())

  @@index([gameId, dayNumber])
  @@index([timestamp(sort: Desc)])
  @@index([relatedQuestion])
}

// Actor model - NPCs from actors.json (cached in DB)
model Actor {
  id              String   @id // From actors.json
  name            String
  description     String?
  domain          String[] // Array of domains
  personality     String?
  tier            String?  // S_TIER, A_TIER, etc.
  affiliations    String[] // Organization IDs
  postStyle       String?
  postExample     String[]
  role            String?  // 'main', 'supporting', 'extra'
  initialLuck     String   @default("medium") // 'low', 'medium', 'high'
  initialMood     Float    @default(0) // -1 to 1
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([tier])
  @@index([role])
}

// Notification model - user notifications
model Notification {
  id          String   @id @default(uuid())
  userId      String   // Who receives the notification
  type        String   // 'comment', 'reaction', 'follow', 'mention', 'reply', 'share'
  actorId     String?  // Who performed the action (user ID or actor ID)
  postId      String?  // Related post (if applicable)
  commentId   String?  // Related comment (if applicable)
  message     String   // Notification message
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())

  // Relationships
  user User @relation("NotificationRecipient", fields: [userId], references: [id], onDelete: Cascade)
  actor User? @relation("NotificationActor", fields: [actorId], references: [id], onDelete: SetNull)

  @@index([userId, read, createdAt(sort: Desc)])
  @@index([userId, createdAt(sort: Desc)])
  @@index([read])
}
